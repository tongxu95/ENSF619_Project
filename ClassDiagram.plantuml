@startuml 

skinparam classAttributeIconSize 0

class MovieCatalogue {
    - movies: ArrayList<Movies>
    + viewMovies(): ArrayList<Movies>
    + searchMovie(name:String):ArrayList<Movies>
}

class Movies {
    - name:String
}

class TheaterCatalogue {
    - theaters: ArrayList<Theater>
    + searchTheatersForMovie(movie:Movies):ArrayList<Theater>
    + searchTheater(name:String, movie:Movies):ArrayList<Theater>
}

class Theater {
    - name: String 
    - movies: MovieCatalogue 
    - showtimes: ArrayList<ShowTimes>
    - rooms: ArrayList<TheaterRoom>
    + searchShowTimes(movie:Movie, date:Date):ArrayList<ShowTime>
}

class ShowTime {
    - movie: Movies
    - theater: String
    - date: Date
    - time: Time
    - room: TheaterRoom
    - price: double
    - seat_offered: SeatMap
    + displaySeats(): SeatMap
    + getPrice(): double
    + selectSeat(seat:Seat):boolean
    + cancelSeat(pos:Pair):boolean
}

class TheaterRoom {
    - number:int
    - seat_arrangement:SeatMap
}

class SeatMap {
    - seats: ArrayList<Seat>
    + displaySeats():SeatMap
    + checkSeatAvailability(pos:Pair):boolean
    + bookSeat(pos:Pair, booking_id:Integer):boolean
    + cancelSeat(pos:Pair):boolean
}

class Seat {
    - booking_id:Integer
    - position: Pair
    + checkAvailability():boolean
    + bookSeat(booking_id:int):boolean
    + cancelSeat():boolean
}

class User {
    - name:String 
    - addr:String
    - financial_institution:String
    - credit_card_no:int
    - card_cvv:int
    - card_exp:Date
    - email:String
    + sendTicket(ticket:MovieTicket)
}

class RegisteredUser extends User {
    - username:String
    - password:String
    - feeRenewDate:Date
    + checkFeeRenewal():boolean
    + promptAnnualFee():void
    + sendMovieNew(ArrayList<Movies>):void
}

class CreditCard {
    - card_no:int 
    - expr_date:int
    - cvv:int 
    - balance: double
    - limit: double
 	+ processTransaction(transaction:double):boolean
}

class MovieTicket {
    - showtime:ShowTime 
    - seat:Seat
    - bookingID:int
    - userType:String
    + cancel():double
}

class BookingManager {
    - movies:MovieCatalogue
    - theaters:TheaterCatalogue
    - bookings:Map<Integer, MovieTicket> 
    + viewMovies(): ArrayList<Movies>
    + searchMovie(name:String):ArrayList<Movies>
    + searchTheatersForMovie(movie:Movies):ArrayList<Theater>
    + searchTheater(name:String, movie:Movies):ArrayList<Theater>
    + getShowTimes(movie:Movie, theater:Theater, date:Date):ArrayList<ShowTime>
    + displaySeat(showtime:ShowTime): SeatMap
    + getPrice(showtime:ShowTime): double
    + addBooking(ticket:MovieTicket):void
    + validateBooking(bookingID:int):MovieTicket
    + verifyCancellation(ticket:MovieTicket):boolean
    + cancelTicket(ticket:MovieTicket):double
    + selectSeat(show:ShowTime, seat:Seat)
}

class LoadDB {
    + readMovies(filename:String):MovieCatalogue
    + readTheaters(filename:String):TheaterCatalogue
    + readRegisteredUsers(filename:String):Map<String, RegisteredUser>
}

class CustomerManager {
    - registeredUsers:Map<String, RegisteredUser>
    - vouchers:Map<Integer,Voucher>
    + login(username:String, password:String):RegisteredUser
    + createTempUser(name:String, addr:String, bank:String, card_no:int, expr_date:int, cvv:int, email:String):User
    + registerUser(name:String, addr:String, bank:String, card_no:int, expr_date:int, cvv:int, email:String):RegisteredUser
    + checkFeeRenewal(regUser:RegisteredUser):boolean
    + sendNews(news:String):boolean
    + createVoucher(credit:double):void
    + useVoucher(price:double):double
}

class ModelController implements ActionListener {
	- gui:GUI
	- banks:BankManager
	- customer:CustomerManager
	- booking:BookingManger
	+ actionPerformed(e: ActionEvent):void
	- viewMovies():void
	- searchMovies(e: ActionEvent):void
    - searchTheatersForMovie(e: ActionEvent):void
    - searchTheater(e: ActionEvent):void
    - getShowTimes(e: ActionEvent):void
    - displaySeat(e: ActionEvent): void
    - getPrice(e: ActionEvent): void
    - processPayment(e: ActionEvent):void
    - cancelTicket(e: ActionEvent):void
    - login(e: ActionEvent):void
    - createTempUser(e: ActionEvent):void
    - registerUser():void
    - selectSeat(e:ActionEvent):void
}

class GUI {
	- cancelPage:CancellationView
	- bookingPage:BookingView
}

class UserInfoView {
	- userName:JTextField
	- password:JTextField
	- name:JTextField
	- addr:JTextField
	- bank:JTextField
	- card_no:JTextField
	- expr_date:JTextField
	- cvv:JTextField
	- email:JTextField
	- login:JButton
	- noAccount:JButton
	- register:JButton
	- display:JTextField
	- makePayment:JButton
}

class CancellationView {
	- bookingID:JTextField
	- display: JTextArea
	- userInfo:UserInfoView
}

class BookingView {
	- viewMovie:JButton
	- searchMovie:JTextField
	- theater:JTextField
	- searchTheater:JButton
	- date:JList
	- showTimes:JList
	- seatMap:JButton[][]
	- display:JTextArea
	- userInfo:UserInfoView
}

class BankController {
	- banks:Map<String,Bank>
	- findBank(bank:String):Bank
	+ processTransaction(bank:Bank, card_no:int, exp_date:int, cvv:int):boolean
}

class Bank {
	- name:String
	- creditCards:ArrayList<CreditCard>
	+ processTransaction(card_no:int, exp_date:int, cvv:int):boolean
}

class Voucher {
	- credit:double
	- expr_date:Date
	+ isValid():boolean
	+ useVoucher(price:double):double
}
@enduml 